{"version":3,"sources":["Cards.js","App.js","index.js"],"names":["Cards","setScore","score","shuffledCards","cards","Grid","container","spacing","item","xs","justifyContent","over","map","c","Card","CardActionArea","onClick","clicked","currentScore","highScore","s","i","length","j","Math","floor","random","temp","console","log","CardMedia","component","src","image","title","name","CardContent","Typography","gutterBottom","align","variant","color","description","id","Button","App","useState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+kDA6GeA,EAlGD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACrBC,EAAgBC,EACpB,OACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,MAAI,EAACC,GAAI,GAAIC,eAAe,SAAxD,WACIR,EAAMS,MACNR,EAAcS,KAAI,SAACC,GAAD,OAChB,cAACR,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACK,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACEC,QAAS,WAkBP,IACgB,IAAdH,EAAEI,SACFf,EAAMgB,eAAiBhB,EAAMiB,UAC7B,CACAN,EAAEI,SAAU,EACZ,IAAIG,EAAIlB,EAAMgB,aACdjB,EAAS,2BACJC,GADG,IAENgB,aAAcE,EAAI,EAClBD,UAAWC,EAAI,KAEjB,IAAK,IAAIC,EAAIlB,EAAcmB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACjD,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOxB,EAAckB,GAC3BlB,EAAckB,GAAKlB,EAAcoB,GACjCpB,EAAcoB,GAAKI,QAEhB,IAAkB,IAAdd,EAAEI,QAAmB,CAC9BJ,EAAEI,SAAU,EACZ,IAAIG,EAAIlB,EAAMgB,aACdjB,EAAS,2BAAKC,GAAN,IAAagB,aAAcE,EAAI,KACvC,IAAK,IAAIC,EAAIlB,EAAcmB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACjD,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOxB,EAAckB,GAC3BlB,EAAckB,GAAKlB,EAAcoB,GACjCpB,EAAcoB,GAAKI,QAGrB1B,EAAS,2BAAKC,GAAN,IAAaS,MAAM,KAC3BiB,QAAQC,IAAI,cAhDlB,UAoDE,cAACC,EAAA,EAAD,CAAWC,UAAU,MAAMC,IAAKnB,EAAEoB,MAAOC,MAAOrB,EAAEsB,OAClD,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,cAAY,EACZC,MAAM,SACNC,QAAQ,KACRT,UAAU,KAJZ,SAMGlB,EAAEsB,OAEL,cAACE,EAAA,EAAD,CACEE,MAAM,SACNC,QAAQ,QACRC,MAAM,gBACNV,UAAU,IAJZ,SAMGlB,EAAE6B,uBAtEU7B,EAAE8B,OA6E5BzC,EAAMS,MACL,cAACN,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACmC,EAAA,EAAD,CACEJ,QAAQ,YACRC,MAAM,YACNzB,QAAS,kBAAMf,EAAS,2BAAKC,GAAN,IAAagB,aAAc,EAAGP,MAAM,MAH7D,2BCzDKkC,MAlCf,WAAgB,IAAD,EACaC,mBAAS,CACjC3B,UAAW,EACXD,aAAc,EACdP,MAAM,IAJK,mBACNT,EADM,KACCD,EADD,KAOb,OACE,eAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,MAAI,EAACC,GAAI,GAAIC,eAAe,SAAxD,UACE,eAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,cAAC4B,EAAA,EAAD,CAAYE,MAAM,SAASE,MAAM,UAAUD,QAAQ,KAAnD,SACG,gBAEH,cAACH,EAAA,EAAD,CAAYE,MAAM,SAASE,MAAM,YAAYD,QAAQ,KAArD,SACG,uDAGL,eAACnC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,MAAI,EAACC,GAAI,GAAIC,eAAe,SAAxD,UACE,cAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAAC4B,EAAA,EAAD,CAAYI,MAAM,UAAUD,QAAQ,KAApC,SACG,UAAYtC,EAAMgB,iBAGvB,cAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAAC4B,EAAA,EAAD,CAAYI,MAAM,UAAUD,QAAQ,KAApC,SACG,eAAiBtC,EAAMiB,iBAI9B,cAAC,EAAD,CAAOjB,MAAOA,EAAOD,SAAUA,QC9BrC8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.338eeb9b.chunk.js","sourcesContent":["import {\n  Grid,\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport cards from \"./cards\";\n\nconst Cards = ({ setScore, score }) => {\n  let shuffledCards = cards;\n  return (\n    <Grid container spacing={3} item xs={11} justifyContent=\"center\">\n      {!score.over &&\n        shuffledCards.map((c) => (\n          <Grid item xs={2} key={c.id}>\n            <Card>\n              <CardActionArea\n                onClick={() => {\n                  // switch (c.clicked) {\n                  //   case false && score.currentScore === score.highScore:\n                  //     c.clicked = true;\n                  //     let s = score.currentScore;\n                  //     setScore({ ...score, currentScore: s + 1 });\n                  //     for (let i = shuffledCards.length - 1; i > 0; i--) {\n                  //       const j = Math.floor(Math.random() * i);\n                  //       const temp = shuffledCards[i];\n                  //       shuffledCards[i] = shuffledCards[j];\n                  //       shuffledCards[j] = temp;\n                  //     }\n                  //     break;\n\n                  //   default:\n                  //     console.log(\"game over\");\n                  //     break;\n                  // }\n                  if (\n                    c.clicked === false &&\n                    score.currentScore === score.highScore\n                  ) {\n                    c.clicked = true;\n                    let s = score.currentScore;\n                    setScore({\n                      ...score,\n                      currentScore: s + 1,\n                      highScore: s + 1,\n                    });\n                    for (let i = shuffledCards.length - 1; i > 0; i--) {\n                      const j = Math.floor(Math.random() * i);\n                      const temp = shuffledCards[i];\n                      shuffledCards[i] = shuffledCards[j];\n                      shuffledCards[j] = temp;\n                    }\n                  } else if (c.clicked === false) {\n                    c.clicked = true;\n                    let s = score.currentScore;\n                    setScore({ ...score, currentScore: s + 1 });\n                    for (let i = shuffledCards.length - 1; i > 0; i--) {\n                      const j = Math.floor(Math.random() * i);\n                      const temp = shuffledCards[i];\n                      shuffledCards[i] = shuffledCards[j];\n                      shuffledCards[j] = temp;\n                    }\n                  } else {\n                    setScore({ ...score, over: true });\n                    console.log(\"game over\");\n                  }\n                }}\n              >\n                <CardMedia component=\"img\" src={c.image} title={c.name} />\n                <CardContent>\n                  <Typography\n                    gutterBottom\n                    align=\"center\"\n                    variant=\"h5\"\n                    component=\"h2\"\n                  >\n                    {c.name}\n                  </Typography>\n                  <Typography\n                    align=\"center\"\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    {c.description}\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        ))}\n      {score.over && (\n        <Grid item xs={1}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => setScore({ ...score, currentScore: 0, over: false })}\n          >\n            Restart\n          </Button>\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Cards;\n","import { Grid, Typography } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Cards from \"./Cards\";\n\nfunction App() {\n  const [score, setScore] = useState({\n    highScore: 0,\n    currentScore: 0,\n    over: false,\n  });\n\n  return (\n    <Grid container spacing={3} item xs={12} justifyContent=\"center\">\n      <Grid item xs={12}>\n        <Typography align=\"center\" color=\"primary\" variant=\"h3\">\n          {\"Memory Game\"}\n        </Typography>\n        <Typography align=\"center\" color=\"secondary\" variant=\"h6\">\n          {\"Select a norse god that you have not selected. \"}\n        </Typography>\n      </Grid>\n      <Grid container spacing={3} item xs={12} justifyContent=\"center\">\n        <Grid item xs={1}>\n          <Typography color=\"primary\" variant=\"h6\">\n            {\"Score: \" + score.currentScore}\n          </Typography>\n        </Grid>\n        <Grid item xs={1}>\n          <Typography color=\"primary\" variant=\"h6\">\n            {\"High Score: \" + score.highScore}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Cards score={score} setScore={setScore} />\n    </Grid>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}